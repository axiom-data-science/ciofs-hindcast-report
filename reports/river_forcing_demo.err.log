Traceback (most recent call last):
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/asyncio/base_events.py", line 650, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/contextlib.py", line 222, in __aexit__
    await self.gen.athrow(typ, value, traceback)
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/site-packages/nbclient/client.py", line 608, in async_setup_kernel
    yield
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/kthyng/miniconda3/envs/ciofs/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
year = 2016
base = "output/river"
locs = f"{base}/axiom.ciofs.river.{year}*.nc"
ds = xr.open_mfdataset(locs, concat_dim="time", combine='nested')
ds = ds.swap_dims({"time": "river_time"})

unique_inds = list(set([station_list_file.index(station_list_file[i]) for i in range(nrivers)]))
labels = [station_list_file[i] for i in unique_inds]
ds["river_temp"].isel(s_rho=0, river=unique_inds).plot.line(x="river_time", lw=3, figsize=(15,7));
plt.legend(labels)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[3], line 4[0m
[1;32m      2[0m base [38;5;241m=[39m [38;5;124m"[39m[38;5;124moutput/river[39m[38;5;124m"[39m
[1;32m      3[0m locs [38;5;241m=[39m [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mbase[38;5;132;01m}[39;00m[38;5;124m/axiom.ciofs.river.[39m[38;5;132;01m{[39;00myear[38;5;132;01m}[39;00m[38;5;124m*.nc[39m[38;5;124m"[39m
[0;32m----> 4[0m ds [38;5;241m=[39m [43mxr[49m[38;5;241;43m.[39;49m[43mopen_mfdataset[49m[43m([49m[43mlocs[49m[43m,[49m[43m [49m[43mconcat_dim[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mtime[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mcombine[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mnested[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m      5[0m ds [38;5;241m=[39m ds[38;5;241m.[39mswap_dims({[38;5;124m"[39m[38;5;124mtime[39m[38;5;124m"[39m: [38;5;124m"[39m[38;5;124mriver_time[39m[38;5;124m"[39m})
[1;32m      7[0m unique_inds [38;5;241m=[39m [38;5;28mlist[39m([38;5;28mset[39m([station_list_file[38;5;241m.[39mindex(station_list_file[i]) [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m(nrivers)]))

File [0;32m~/miniconda3/envs/ciofs/lib/python3.11/site-packages/xarray/backends/api.py:983[0m, in [0;36mopen_mfdataset[0;34m(paths, chunks, concat_dim, compat, preprocess, engine, data_vars, coords, combine, parallel, join, attrs_file, combine_attrs, **kwargs)[0m
[1;32m    980[0m     open_ [38;5;241m=[39m open_dataset
[1;32m    981[0m     getattr_ [38;5;241m=[39m [38;5;28mgetattr[39m
[0;32m--> 983[0m datasets [38;5;241m=[39m [43m[[49m[43mopen_[49m[43m([49m[43mp[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mopen_kwargs[49m[43m)[49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mp[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mpaths[49m[43m][49m
[1;32m    984[0m closers [38;5;241m=[39m [getattr_(ds, [38;5;124m"[39m[38;5;124m_close[39m[38;5;124m"[39m) [38;5;28;01mfor[39;00m ds [38;5;129;01min[39;00m datasets]
[1;32m    985[0m [38;5;28;01mif[39;00m preprocess [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m~/miniconda3/envs/ciofs/lib/python3.11/site-packages/xarray/backends/api.py:983[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[1;32m    980[0m     open_ [38;5;241m=[39m open_dataset
[1;32m    981[0m     getattr_ [38;5;241m=[39m [38;5;28mgetattr[39m
[0;32m--> 983[0m datasets [38;5;241m=[39m [[43mopen_[49m[43m([49m[43mp[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mopen_kwargs[49m[43m)[49m [38;5;28;01mfor[39;00m p [38;5;129;01min[39;00m paths]
[1;32m    984[0m closers [38;5;241m=[39m [getattr_(ds, [38;5;124m"[39m[38;5;124m_close[39m[38;5;124m"[39m) [38;5;28;01mfor[39;00m ds [38;5;129;01min[39;00m datasets]
[1;32m    985[0m [38;5;28;01mif[39;00m preprocess [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m~/miniconda3/envs/ciofs/lib/python3.11/site-packages/xarray/backends/api.py:510[0m, in [0;36mopen_dataset[0;34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, inline_array, backend_kwargs, **kwargs)[0m
[1;32m    507[0m     kwargs[38;5;241m.[39mupdate(backend_kwargs)
[1;32m    509[0m [38;5;28;01mif[39;00m engine [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 510[0m     engine [38;5;241m=[39m [43mplugins[49m[38;5;241;43m.[39;49m[43mguess_engine[49m[43m([49m[43mfilename_or_obj[49m[43m)[49m
[1;32m    512[0m backend [38;5;241m=[39m plugins[38;5;241m.[39mget_backend(engine)
[1;32m    514[0m decoders [38;5;241m=[39m _resolve_decoders_kwargs(
[1;32m    515[0m     decode_cf,
[1;32m    516[0m     open_backend_dataset_parameters[38;5;241m=[39mbackend[38;5;241m.[39mopen_dataset_parameters,
[0;32m   (...)[0m
[1;32m    522[0m     decode_coords[38;5;241m=[39mdecode_coords,
[1;32m    523[0m )

File [0;32m~/miniconda3/envs/ciofs/lib/python3.11/site-packages/xarray/backends/plugins.py:177[0m, in [0;36mguess_engine[0;34m(store_spec)[0m
[1;32m    169[0m [38;5;28;01melse[39;00m:
[1;32m    170[0m     error_msg [38;5;241m=[39m (
[1;32m    171[0m         [38;5;124m"[39m[38;5;124mfound the following matches with the input file in xarray[39m[38;5;124m'[39m[38;5;124ms IO [39m[38;5;124m"[39m
[1;32m    172[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mbackends: [39m[38;5;132;01m{[39;00mcompatible_engines[38;5;132;01m}[39;00m[38;5;124m. But their dependencies may not be installed, see:[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m    173[0m         [38;5;124m"[39m[38;5;124mhttps://docs.xarray.dev/en/stable/user-guide/io.html [39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m    174[0m         [38;5;124m"[39m[38;5;124mhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html[39m[38;5;124m"[39m
[1;32m    175[0m     )
[0;32m--> 177[0m [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(error_msg)

[0;31mValueError[0m: did not find a match in any of xarray's currently installed IO backends ['netcdf4']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:
https://docs.xarray.dev/en/stable/getting-started-guide/installing.html
https://docs.xarray.dev/en/stable/user-guide/io.html
ValueError: did not find a match in any of xarray's currently installed IO backends ['netcdf4']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:
https://docs.xarray.dev/en/stable/getting-started-guide/installing.html
https://docs.xarray.dev/en/stable/user-guide/io.html

